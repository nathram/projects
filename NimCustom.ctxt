#BlueJ class context
comment0.target=NimCustom
comment1.params=firstplayer
comment1.target=NimCustom(int)
comment1.text=\r\n\ Default\ constructor\:\ defaults\ to\ {3,\ 5,\ 8}\ as\ the\ starting\r\n\ @param\ int\ to\ indicate\ who\ goes\ first\r\n
comment2.params=firstplayer\ piles
comment2.target=NimCustom(int,\ int)
comment2.text=\r\n\ Copy\ constructor\r\n\ @param\ int\ who\ goes\ first,\ int\ for\ \#\ of\ piles\r\n
comment3.params=
comment3.target=void\ displayNim()
comment3.text=\r\n\ Displays\ the\ board\r\n
comment4.params=pile\ removed
comment4.target=java.lang.String\ move(int,\ int)
comment4.text=\r\n\ Completes\ a\ move\r\n\ @param\ int\ which\ pile,\ int\ how\ much\ to\ be\ removed\r\n\ @return\ either\ how\ much\ was\ removed\ +\ the\ pile,\ or\ to\ try\ again\ because\ the\ input\ was\ invalid\r\n
comment5.params=
comment5.target=void\ computerStratBase()
comment5.text=\r\n\ Adds\ the\ first\ array\ to\ losingPositions\ and\ calls\ the\ recursion\ method\ to\ complete\ it\r\n
comment6.params=temp2\ level
comment6.target=void\ computerStratRecursion(int[],\ int)
comment6.text=\r\n\ Completes\ a\ recursion\ to\ get\ an\ undefined\ number\ of\ for\ loops\ based\ on\ the\ \#\ of\ piles,\ and\ populate\ losingPositions\r\n\ @param\ int[]\ the\ array\ being\ checked\ so\ that\ it\ can\ keep\ the\ old\ values\ and\ only\ change\ the\ ones\ it\ needs\ to,\ int\r\n\ the\ level\ to\ check\ how\ many\ recursions\ are\ left\ to\ be\ completed\r\n
comment7.params=
comment7.target=void\ computerCalcs()
comment7.text=\r\n\ Calculates\ the\ best\ move\ (which\ pile\ +\ how\ much\ to\ remove)\r\n
comment8.params=winner
comment8.target=boolean\ gameOver(int)
comment8.text=\r\n\ Checks\ if\ the\ game\ is\ over\ +\ displays\ the\ winner\r\n\ @param\ int\ movecounter\ to\ check\ whose\ move\ it\ is\ ->\ who\ won\r\n\ @returns\ true\ if\ game\ is\ over,\ false\ if\ the\ game\ is\ not\ over\r\n
numComments=9
